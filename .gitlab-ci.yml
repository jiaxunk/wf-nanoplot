# Include shared CI
include:
    - project: "epi2melabs/ci-templates"
      file: "wf-containers.yaml"

variables:
    # We'll use the single-file case for these runs
    NF_WORKFLOW_OPTS: "--fastq test_data/reads.fastq.gz"
    TEST_CMD: "bash test/run_ingress_test.sh"
    S3_TEST_DATA: "s3://ont-exd-int-s3-euwst1-epi2me-labs/wf-template/cw-1019/test_data"
    CI_FLAVOUR: "new"
    PYTEST_CONTAINER_NAME: "wf-common"
    PYTEST_CONTAINER_CONFIG_KEY: "common_sha="


# Remove this block in downstream templates
singularity-run:
    tags: [] # no need for big ram
# end


docker-run:

    # Remove this directive in downstream templates
    tags: [] # no need for big ram

    # Define a 1D job matrix to inject a variable named MATRIX_NAME into
    #   the CI environment, we can use the value of MATRIX_NAME to determine
    #   which options to apply as part of the rules block below
    # NOTE There is a slightly cleaner way to define this matrix to include
    #   the variables, but it is broken when using long strings! See CW-756
    parallel:
        matrix:
            # TODO: do we really need to run all from s3?
            - MATRIX_NAME: [
                "single-file", "single-file-s3", "single-file-chunk", "single-file-s3-chunk",
                "case01", "case01-s3", "case01-chunk", "case01-single-chunk",
                "case02", "case02-s3", "case02-no-fastcat_stats", "case02-no-fastcat_stats-s3", "case02-no-fastcat_stats-chunk", "case02-no-fastcat_stats-s3-chunk", "case02-per-read-stats",
                "case03", "case03-s3",
                "case04", "case04-s3",
                "case05", "case05-s3",
                "case06", "case06-s3",
                "case07", "case07-s3",
                "case08", "case08-s3", "case08-unclassified", "case08-unclassified-s3",
                "case09", "case09-s3",
                "case10", "case10-s3",
                "case11", "case11-s3",
                "case12", "case12-s3", "case12-unclassified", "case12-unclassified-s3",
                "case13", "case13-s3",
                "case14",
                "case15",
                "case16",
                "case16-nonexisting-client-fields",
                "case17",
                "case18",
                "case19",
                "case20",
                "case21",
                "case22",
                "case22-allow_multiple_basecall_models",
                "case23-empty_fastq", "case24-empty_fastq_gz",
                "case25",
                "fq-case26-xamcase23",
                "xam-single-file", "xam-single-file-s3",
                "xam-case01", "xam-case01-s3",
                "xam-case02", "xam-case02-s3",
                "xam-case02-no-bamstats",
                # TODO: need more fastq chunk tests for BAM?
                "xam-case02-return_fastq", "xam-case02-return_fastq-chunks", "xam-case02-per_read_stats",
                "xam-case03", "xam-case03-s3",
                "xam-case03-sample_sheet",
                "xam-case03-keep_unaligned-sample_sheet",
                "xam-case03-keep_unaligned-sample_sheet-return_fastq",
                "xam-case03-barcode02",  # test_data/xam_ingress/case03/barcode02 contains only uBAM
                "xam-case03-barcode02-keep_unaligned",
                "xam-case04", "xam-case04-s3",
                "xam-case05", "xam-case05-s3",
                "xam-case06", "xam-case06-s3",
                "xam-case07", "xam-case07-s3",
                "xam-case08", "xam-case08-s3",
                "xam-case08-skip",
                "xam-case09", "xam-case09-s3",
                "xam-case10", "xam-case10-s3",
                "xam-case11", "xam-case11-s3",
                "xam-case12", "xam-case12-s3",
                "xam-case13", "xam-case13-s3",
                "xam-case14", "xam-case14-s3",
                "xam-case14-keep_unaligned", "xam-case14-s3-keep_unaligned",
                "xam-case15", "xam-case15-s3",
                "xam-case16", "xam-case16-s3",
                "xam-case17", "xam-case17-s3",
                "xam-case18", "xam-case18-s3",
                "xam-case19", "xam-case19-s3",
                "xam-case20",
                "xam-case21-exp-no-files",
                "xam-case21-exp-single-file",
                "xam-case21-exp-spurious-level",
                "xam-case22-barcode-name",
                "xam-case22-barcode-sheet",
                "xam-case22-barcode-sheet-name",
                "xam-case22-barcode-sheet-sample-notindir",
                "xam-case22-barcode-no-sheet",
                "xam-case22-barcode-sheet-incl-all", "s3-xam-case22-barcode-sheet-incl-all",
                "xam-case23-alias-name",
                "xam-case23-alias-sheet",
                "xam-case23-alias-sheet-dupe-alias",
                "xam-case23-alias-sheet-bad-alias",
                "xam-case23-alias-sheet-name",
                "xam-case23-alias-sheet-sample-notindir",
                "xam-case23-alias-no-sheet",
                "xam-case23-alias-sheet-incl-fail",
                "xam-case23-alias-sheet-incl-unclassified",
                "xam-case23-alias-sheet-incl-all", "s3-xam-case23-barcode-sheet-incl-all",
                "xam-case24-conflict",
                "unexpected-params"
              ]
    rules:
        # NOTE As we're overriding the rules block for the included docker-run
        #   we must redefine this CI_COMMIT_BRANCH rule to prevent docker-run
        #   being incorrectly scheduled for "detached merge request pipelines" etc.
        - if: ($CI_COMMIT_BRANCH == null || $CI_COMMIT_BRANCH == "dev-template")
          when: never
        - if: $MATRIX_NAME == "single-file"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/reads.fastq.gz"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/reads.fastq.gz fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "single-file-s3"
          variables:
              NF_WORKFLOW_OPTS: "--fastq $S3_TEST_DATA/reads.fastq.gz"
              AFTER_NEXTFLOW_CMD: $TEST_CMD $S3_TEST_DATA/reads.fastq.gz fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "single-file-chunk"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/reads.fastq.gz --fastq_chunk 1"
              AFTER_NEXTFLOW_CMD: $TEST_CMD -c 1 test_data/reads.fastq.gz fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "single-file-s3-chunk"
          variables:
              NF_WORKFLOW_OPTS: "--fastq $S3_TEST_DATA/reads.fastq.gz --fastq_chunk 1"
              AFTER_NEXTFLOW_CMD: $TEST_CMD -c 1 $S3_TEST_DATA/reads.fastq.gz fastq $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "case01"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case01"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/fastq_ingress/case01 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case01-s3"
          variables:
              NF_WORKFLOW_OPTS: "--fastq $S3_TEST_DATA/fastq_ingress/case01"
              AFTER_NEXTFLOW_CMD: $TEST_CMD $S3_TEST_DATA/fastq_ingress/case01 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case01-chunk"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case01 --fastq_chunk 1"
              AFTER_NEXTFLOW_CMD: $TEST_CMD -c 1 test_data/fastq_ingress/case01 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case01-single-chunk"
          variables:
            NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case01 --fastq_chunk 9"
            AFTER_NEXTFLOW_CMD: $TEST_CMD -c 9 test_data/fastq_ingress/case01 fastq $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "case02"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case02"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/fastq_ingress/case02 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case02-s3"
          variables:
              NF_WORKFLOW_OPTS: "--fastq $S3_TEST_DATA/fastq_ingress/case02"
              AFTER_NEXTFLOW_CMD: $TEST_CMD $S3_TEST_DATA/fastq_ingress/case02 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case02-no-fastcat_stats"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case02 --wf.fastcat_stats false"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/fastq_ingress/case02 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case02-no-fastcat_stats-s3"
          variables:
              NF_WORKFLOW_OPTS: "--fastq $S3_TEST_DATA/fastq_ingress/case02 --wf.fastcat_stats false"
              AFTER_NEXTFLOW_CMD: $TEST_CMD $S3_TEST_DATA/fastq_ingress/case02 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case02-no-fastcat_stats-chunk"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case02 --wf.fastcat_stats false --fastq_chunk 1"
              AFTER_NEXTFLOW_CMD: $TEST_CMD -c 1 test_data/fastq_ingress/case02 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case02-no-fastcat_stats-s3-chunk"
          variables:
              NF_WORKFLOW_OPTS: "--fastq $S3_TEST_DATA/fastq_ingress/case02 --wf.fastcat_stats false --fastq_chunk 1"
              AFTER_NEXTFLOW_CMD: $TEST_CMD -c 1 $S3_TEST_DATA/fastq_ingress/case02 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case02-per-read-stats"
          variables:
              NF_WORKFLOW_OPTS: "--fastq $S3_TEST_DATA/fastq_ingress/case02 --wf.per_read_stats true"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/fastq_ingress/case02 fastq $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "case03"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case03"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "All files in the input folder must be at the same folder level. Please reorganise and try again."
        - if: $MATRIX_NAME == "case03-s3"
          variables:
              NF_WORKFLOW_OPTS: "--fastq $S3_TEST_DATA/fastq_ingress/case03"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "All files in the input folder must be at the same folder level. Please reorganise and try again."

        - if: $MATRIX_NAME == "case04"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case04"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/fastq_ingress/case04 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case04-s3"
          variables:
              NF_WORKFLOW_OPTS: "--fastq $S3_TEST_DATA/fastq_ingress/case04"
              AFTER_NEXTFLOW_CMD: $TEST_CMD $S3_TEST_DATA/fastq_ingress/case04 fastq $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "case05"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case05 --sample_sheet test_data/fastq_ingress/case05/sample_sheet.csv"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/fastq_ingress/case05 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case05-s3"
          variables:
              NF_WORKFLOW_OPTS: "--fastq $S3_TEST_DATA/fastq_ingress/case05 --sample_sheet $S3_TEST_DATA/fastq_ingress/case05/sample_sheet.csv"
              AFTER_NEXTFLOW_CMD: $TEST_CMD -s $S3_TEST_DATA/fastq_ingress/case05/sample_sheet.csv $S3_TEST_DATA/fastq_ingress/case05 fastq $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "case06"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case06 --sample_sheet test_data/fastq_ingress/case06/sample_sheet.csv"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/fastq_ingress/case06 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case06-s3"
          variables:
              NF_WORKFLOW_OPTS: "--fastq $S3_TEST_DATA/fastq_ingress/case06 --sample_sheet $S3_TEST_DATA/fastq_ingress/case06/sample_sheet.csv"
              AFTER_NEXTFLOW_CMD: $TEST_CMD -s $S3_TEST_DATA/fastq_ingress/case06/sample_sheet.csv $S3_TEST_DATA/fastq_ingress/case06 fastq $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "case07"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case07 --sample_sheet test_data/fastq_ingress/case07/sample_sheet.csv"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/fastq_ingress/case07 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case07-s3"
          variables:
              NF_WORKFLOW_OPTS: "--fastq $S3_TEST_DATA/fastq_ingress/case07 --sample_sheet $S3_TEST_DATA/fastq_ingress/case07/sample_sheet.csv"
              AFTER_NEXTFLOW_CMD: $TEST_CMD -s $S3_TEST_DATA/fastq_ingress/case07/sample_sheet.csv $S3_TEST_DATA/fastq_ingress/case07 fastq $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "case08"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case08"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/fastq_ingress/case08 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case08-s3"
          variables:
              NF_WORKFLOW_OPTS: "--fastq $S3_TEST_DATA/fastq_ingress/case08"
              AFTER_NEXTFLOW_CMD: $TEST_CMD $S3_TEST_DATA/fastq_ingress/case08 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case08-unclassified"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case08 --analyse_unclassified"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/fastq_ingress/case08 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case08-unclassified-s3"
          variables:
              NF_WORKFLOW_OPTS: "--fastq $S3_TEST_DATA/fastq_ingress/case08 --analyse_unclassified"
              AFTER_NEXTFLOW_CMD: $TEST_CMD $S3_TEST_DATA/fastq_ingress/case08 fastq $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "case09"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case09"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/fastq_ingress/case09 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case09-s3"
          variables:
              NF_WORKFLOW_OPTS: "--fastq $S3_TEST_DATA/fastq_ingress/case09"
              AFTER_NEXTFLOW_CMD: $TEST_CMD $S3_TEST_DATA/fastq_ingress/case09 fastq $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "case10"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case10"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "All files in the input folder must be at the same folder level. Please reorganise and try again."
        - if: $MATRIX_NAME == "case10-s3"
          variables:
              NF_WORKFLOW_OPTS: "--fastq $S3_TEST_DATA/fastq_ingress/case10"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "All files in the input folder must be at the same folder level. Please reorganise and try again."

        - if: $MATRIX_NAME == "case11"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case11 --sample_sheet test_data/fastq_ingress/case11/sample_sheet.csv"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "Invalid sample sheet: values in 'alias' column not unique"
        - if: $MATRIX_NAME == "case11-s3"
          variables:
              NF_WORKFLOW_OPTS: "--fastq $S3_TEST_DATA/fastq_ingress/case11 --sample_sheet $S3_TEST_DATA/fastq_ingress/case11/sample_sheet.csv"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "Invalid sample sheet: values in 'alias' column not unique"

        - if: $MATRIX_NAME == "case12"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case12"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "No valid files ending in '.fastq' / '.fastq.gz' / '.fq' / '.fq.gz' found in input folder '.*'."
        - if: $MATRIX_NAME == "case12-s3"
          variables:
              NF_WORKFLOW_OPTS: "--fastq $S3_TEST_DATA/fastq_ingress/case12"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "No valid files ending in '.fastq' / '.fastq.gz' / '.fq' / '.fq.gz' found in input folder '.*'."
        - if: $MATRIX_NAME == "case12-unclassified"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case12 --analyse_unclassified"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/fastq_ingress/case12 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case12-unclassified-s3"
          variables:
              NF_WORKFLOW_OPTS: "--fastq $S3_TEST_DATA/fastq_ingress/case12 --analyse_unclassified"
              AFTER_NEXTFLOW_CMD: $TEST_CMD $S3_TEST_DATA/fastq_ingress/case12 fastq $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "case13"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case13"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/fastq_ingress/case13 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case13-s3"
          variables:
              NF_WORKFLOW_OPTS: "--fastq $S3_TEST_DATA/fastq_ingress/case13"
              AFTER_NEXTFLOW_CMD: $TEST_CMD $S3_TEST_DATA/fastq_ingress/case13 fastq $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "case14"
          variables:
              NF_WORKFLOW_OPTS: "--fastq 'test_data/fastq_ingress/case14/reads01 space.fastq'"
              AFTER_NEXTFLOW_CMD: "$TEST_CMD 'test_data/fastq_ingress/case14/reads01 space.fastq' fastq $$PWD/$$CI_PROJECT_NAME"

        - if: $MATRIX_NAME == "case15"
          variables:
              NF_WORKFLOW_OPTS: "--fastq 'test_data/fastq_ingress/case 15'"
              AFTER_NEXTFLOW_CMD: "$TEST_CMD 'test_data/fastq_ingress/case 15' fastq $$PWD/$$CI_PROJECT_NAME"

        - if: $MATRIX_NAME == "case16"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case16 --sample_sheet test_data/fastq_ingress/case16/sample_sheet.csv --client_fields test_data/fastq_ingress/case16/client_fields.json"
              AFTER_NEXTFLOW_CMD: >
                $TEST_CMD test_data/fastq_ingress/case16 fastq $$PWD/$$CI_PROJECT_NAME
                && grep "Dwight" $$PWD/$$CI_PROJECT_NAME/wf-template-report.html

        - if: $MATRIX_NAME == "case16-nonexisting-client-fields"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case16 --sample_sheet test_data/fastq_ingress/case16/sample_sheet.csv --client_fields test_data/fastq_ingress/case16/client_fields_not_there.json"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/fastq_ingress/case16 fastq $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "case17"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case17 --sample_sheet test_data/fastq_ingress/case17/sample_sheet.csv --client_fields test_data/fastq_ingress/case17/client_fields.json"
              AFTER_NEXTFLOW_CMD: >
                $TEST_CMD test_data/fastq_ingress/case17 fastq $$PWD/$$CI_PROJECT_NAME
                && grep "ERROR: Client info is not correctly formatted" $$PWD/$$CI_PROJECT_NAME/wf-template-report.html

        - if: $MATRIX_NAME == "case18"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case18 --sample_sheet test_data/fastq_ingress/case18/sample_sheet.csv"
              NF_IGNORE_PROCESSES: ""
              AFTER_NEXTFLOW_CMD: >
                $TEST_CMD test_data/fastq_ingress/case18 fastq $$PWD/$$CI_PROJECT_NAME
                && (
                  set -ex;
                  grep "<b>customer01</b> analysis group: sample1, sample2\." $$PWD/$$CI_PROJECT_NAME/wf-template-customer01-report.html;
                  grep "<b>customer02</b> analysis group: sample3\." $$PWD/$$CI_PROJECT_NAME/wf-template-customer02-report.html;
                )

        - if: $MATRIX_NAME == "case19"
          variables:
            NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case19"
            AFTER_NEXTFLOW_CMD: >
              $TEST_CMD test_data/fastq_ingress/case19 fastq $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "case20"
          variables:
            NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case20"
            AFTER_NEXTFLOW_CMD: >
              $TEST_CMD test_data/fastq_ingress/case20 fastq $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "case21"
          variables:
            NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case21"
            AFTER_NEXTFLOW_CMD: >
              $TEST_CMD test_data/fastq_ingress/case21 fastq $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "case22"
          variables:
            NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case22"
            AFTER_NEXTFLOW_CMD: >
              set -ex; $TEST_CMD test_data/fastq_ingress/case22 fastq $$PWD/$$CI_PROJECT_NAME
              && grep "Found multiple basecall models for sample 'case22':" .nextflow.log
        - if: $MATRIX_NAME == "case22-allow_multiple_basecall_models"
          variables:
            NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case22 --wf.allow_multiple_basecall_models"
            AFTER_NEXTFLOW_CMD: >
              set -ex; $TEST_CMD test_data/fastq_ingress/case22 fastq $$PWD/$$CI_PROJECT_NAME
              && ! grep "Found multiple basecall models for sample 'case22':" .nextflow.log
        - if: $MATRIX_NAME == "case23-empty_fastq"
          variables:
            NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case23/"
            AFTER_NEXTFLOW_CMD: >
              $TEST_CMD test_data/fastq_ingress/case23 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case24-empty_fastq_gz"
          variables:
            NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case24/"
            AFTER_NEXTFLOW_CMD: >
              $TEST_CMD test_data/fastq_ingress/case24 fastq $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "case25"
          variables:
            NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case\\'25/"
            AFTER_NEXTFLOW_CMD: >
              $TEST_CMD test_data/fastq_ingress/case\'25 fastq $$PWD/$$CI_PROJECT_NAME

        # check that fastq explodes on minknow experiment directory for now
        # see CW-5613
        - if: $MATRIX_NAME == "fq-case26-xamcase23"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/fastq_ingress/case26 --sample_sheet test_data/fastq_ingress/case26/sample_sheet.csv"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "FASTQ input not currently supported when ingressing MinKNOW experiment folder."

        # now the cases for xam_ingress
        - if: $MATRIX_NAME == "xam-single-file"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/reads.bam"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/reads.bam bam $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "xam-single-file-s3"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/reads.bam"
              AFTER_NEXTFLOW_CMD: $TEST_CMD ${S3_TEST_DATA}/xam_ingress/reads.bam bam $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "xam-case01"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case01"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "Found mixed headers in (u)BAM files of sample 'case01'."
        - if: $MATRIX_NAME == "xam-case01-s3"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case01"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "Found mixed headers in (u)BAM files of sample 'case01'."

        - if: $MATRIX_NAME == "xam-case02"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case02"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case02 bam $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "xam-case02-s3"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case02"
              AFTER_NEXTFLOW_CMD: $TEST_CMD ${S3_TEST_DATA}/xam_ingress/case02 bam $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "xam-case02-no-bamstats"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case02 --wf.bamstats false"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case02 bam $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "xam-case02-return_fastq"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case02 --wf.return_fastq"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case02 bam $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "xam-case02-return_fastq-chunks"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case02 --wf.return_fastq --fastq_chunk 1"
              AFTER_NEXTFLOW_CMD: $TEST_CMD -c 1 test_data/xam_ingress/case02 bam $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "xam-case02-per_read_stats"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case02 --wf.return_fastq --wf.per_read_stats"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case02 bam $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "xam-case03"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case03"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "Found mixed headers in (u)BAM files of sample 'barcode03'."
        - if: $MATRIX_NAME == "xam-case03-s3"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case03"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "Found mixed headers in (u)BAM files of sample 'barcode03'."
        - if: $MATRIX_NAME == "xam-case03-keep_unaligned"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case03 --wf.keep_unaligned"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "Found mixed headers in (u)BAM files of sample 'barcode03'."
        - if: $MATRIX_NAME == "xam-case03-sample_sheet"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case03 --sample_sheet test_data/xam_ingress/case03/sample_sheet.csv"
              AFTER_NEXTFLOW_CMD: >
                $TEST_CMD test_data/xam_ingress/case03 bam $$PWD/$$CI_PROJECT_NAME
                && grep "Ignoring barcode03: Found in input folder but sample sheet has no such entry." .nextflow.log
        - if: $MATRIX_NAME == "xam-case03-keep_unaligned-sample_sheet"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case03 --sample_sheet test_data/xam_ingress/case03/sample_sheet.csv --wf.keep_unaligned"
              AFTER_NEXTFLOW_CMD: >
                $TEST_CMD test_data/xam_ingress/case03 bam $$PWD/$$CI_PROJECT_NAME
                && grep "Ignoring barcode03: Found in input folder but sample sheet has no such entry." .nextflow.log
        - if: $MATRIX_NAME == "xam-case03-keep_unaligned-sample_sheet-return_fastq"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case03 --sample_sheet test_data/xam_ingress/case03/sample_sheet.csv --wf.keep_unaligned --wf.return_fastq"
              AFTER_NEXTFLOW_CMD: >
                $TEST_CMD test_data/xam_ingress/case03 bam $$PWD/$$CI_PROJECT_NAME
                && grep "Ignoring barcode03: Found in input folder but sample sheet has no such entry." .nextflow.log
        - if: $MATRIX_NAME == "xam-case03-barcode02"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case03/barcode02"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case03/barcode02 bam $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "xam-case03-barcode02-keep_unaligned"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case03/barcode02 --wf.keep_unaligned"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case03/barcode02 bam $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "xam-case04"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case04"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "Found mixed headers in (u)BAM files of sample 'case04'."
        - if: $MATRIX_NAME == "xam-case04-s3"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case04"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "Found mixed headers in (u)BAM files of sample 'case04'."

        - if: $MATRIX_NAME == "xam-case05"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case05/"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case05 bam $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "xam-case05-s3"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case05/"
              AFTER_NEXTFLOW_CMD: $TEST_CMD ${S3_TEST_DATA}/xam_ingress/case05 bam $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "xam-case06"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case06/"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case06/ bam $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "xam-case06-s3"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case06/"
              AFTER_NEXTFLOW_CMD: $TEST_CMD ${S3_TEST_DATA}/xam_ingress/case06/ bam $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "xam-case07"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case07/"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case07/ bam $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "xam-case07-s3"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case07/"
              AFTER_NEXTFLOW_CMD: $TEST_CMD ${S3_TEST_DATA}/xam_ingress/case07/ bam $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "xam-case08"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case08/reads.ubam --wf.keep_unaligned"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case08/reads.ubam bam $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "xam-case08-s3"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case08/reads.ubam --wf.keep_unaligned"
              AFTER_NEXTFLOW_CMD: $TEST_CMD ${S3_TEST_DATA}/xam_ingress/case08/reads.ubam bam $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "xam-case08-skip"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case08/reads.ubam --wf.keep_unaligned false"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case08/reads.ubam bam $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "xam-case09"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case09/reads.bam"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case09/reads.bam bam $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "xam-case09-s3"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case09/reads.bam"
              AFTER_NEXTFLOW_CMD: $TEST_CMD ${S3_TEST_DATA}/xam_ingress/case09/reads.bam bam $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "xam-case10"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case10/reads.bam"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case10/reads.bam bam $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "xam-case10-s3"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case10/reads.bam"
              AFTER_NEXTFLOW_CMD: $TEST_CMD ${S3_TEST_DATA}/xam_ingress/case10/reads.bam bam $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "xam-case11"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case11/reads.bam"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case11/reads.bam bam $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "xam-case11-s3"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case11/reads.bam"
              AFTER_NEXTFLOW_CMD: $TEST_CMD ${S3_TEST_DATA}/xam_ingress/case11/reads.bam bam $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "xam-case12"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case12/reads.bam"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case12/reads.bam bam $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "xam-case12-s3"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case12/reads.bam"
              AFTER_NEXTFLOW_CMD: $TEST_CMD ${S3_TEST_DATA}/xam_ingress/case12/reads.bam bam $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "xam-case13"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case13/ --wf.keep_unaligned"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case13/ bam $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "xam-case13-s3"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case13/ --wf.keep_unaligned"
              AFTER_NEXTFLOW_CMD: $TEST_CMD ${S3_TEST_DATA}/xam_ingress/case13/ bam $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "xam-case14"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case14/"
              AFTER_NEXTFLOW_CMD: $TEST_CMD ${S3_TEST_DATA}/xam_ingress/case14/ bam $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "xam-case14-s3"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case14/"
              AFTER_NEXTFLOW_CMD: $TEST_CMD ${S3_TEST_DATA}/xam_ingress/case14/ bam $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "xam-case14-keep_unaligned"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case14/ --wf.keep_unaligned"
              AFTER_NEXTFLOW_CMD: >
                $TEST_CMD ${S3_TEST_DATA}/xam_ingress/case14/ bam $$PWD/$$CI_PROJECT_NAME
                && grep "Found multiple basecall models for sample 'case14':" .nextflow.log
        - if: $MATRIX_NAME == "xam-case14-s3-keep_unaligned"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case14/ --wf.keep_unaligned"
              AFTER_NEXTFLOW_CMD: >
                $TEST_CMD ${S3_TEST_DATA}/xam_ingress/case14/ bam $$PWD/$$CI_PROJECT_NAME
                && grep "Found multiple basecall models for sample 'case14':" .nextflow.log

        - if: $MATRIX_NAME == "xam-case15"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case15"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case15/ bam $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "xam-case15-s3"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case15"
              AFTER_NEXTFLOW_CMD: $TEST_CMD ${S3_TEST_DATA}/xam_ingress/case15/ bam $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "xam-case16"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case16"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case16/ bam $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "xam-case16-s3"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case16"
              AFTER_NEXTFLOW_CMD: $TEST_CMD ${S3_TEST_DATA}/xam_ingress/case16/ bam $$PWD/$$CI_PROJECT_NAME

        - if: $MATRIX_NAME == "xam-case17"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case17"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case17/ bam $$PWD/$$CI_PROJECT_NAME
        - if: $MATRIX_NAME == "xam-case17-s3"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case17"
              AFTER_NEXTFLOW_CMD: $TEST_CMD ${S3_TEST_DATA}/xam_ingress/case17/ bam $$PWD/$$CI_PROJECT_NAME


        - if: $MATRIX_NAME == "xam-case18"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case18"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case18/ bam $$PWD/$$CI_PROJECT_NAME; grep -v "sortBam" $$PWD/$$CI_PROJECT_NAME/execution/trace.txt;
        - if: $MATRIX_NAME == "xam-case18-s3"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case18"
              AFTER_NEXTFLOW_CMD: $TEST_CMD ${S3_TEST_DATA}/xam_ingress/case18/ bam $$PWD/$$CI_PROJECT_NAME; grep -v "sortBam" $$PWD/$$CI_PROJECT_NAME/execution/trace.txt;


        - if: $MATRIX_NAME == "xam-case19"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case19"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case19/ bam $$PWD/$$CI_PROJECT_NAME; grep "sortBam" $$PWD/$$CI_PROJECT_NAME/execution/trace.txt;
        - if: $MATRIX_NAME == "xam-case19-s3"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case19"
              AFTER_NEXTFLOW_CMD: $TEST_CMD ${S3_TEST_DATA}/xam_ingress/case19/ bam $$PWD/$$CI_PROJECT_NAME; grep -v "sortBam" $$PWD/$$CI_PROJECT_NAME/execution/trace.txt;


        - if: $MATRIX_NAME == "xam-case20"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case20"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case20/ bam $$PWD/$$CI_PROJECT_NAME;


        - if: $MATRIX_NAME == "xam-case21-excl-unclassified"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case21"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "No valid files ending in '.bam' / '.ubam' found in input folder '.*'."
        # checks unclassified reads are processed appropriately
        # also neatly checks everything still works with a single BAM file in a dir structure
        - if: $MATRIX_NAME == "xam-case21-incl-unclassified"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case21 --analyse_unclassified --sample unclassified"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case21/ bam $$PWD/$$CI_PROJECT_NAME;
        - if: $MATRIX_NAME == "xam-case21-spurious-level"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case21 --analyse_unclassified --analyse_fail"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "All files in the input folder must be at the same folder level. Please reorganise and try again."


        # case 22 use sample sheet
        - if: $MATRIX_NAME == "xam-case22-barcode-sheet"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case22 --sample_sheet test_data/xam_ingress/case22/sample_sheet.csv"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case22/ bam $$PWD/$$CI_PROJECT_NAME;
        # case 22 use sample name
        - if: $MATRIX_NAME == "xam-case22-barcode-name"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case22 --sample barcode01"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case22/ bam $$PWD/$$CI_PROJECT_NAME;
        # case 22 use sample sheet and override with sample name
        - if: $MATRIX_NAME == "xam-case22-barcode-sheet-name"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case22 --sample barcode01 --sample_sheet test_data/xam_ingress/case22/sample_sheet.csv"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case22/ bam $$PWD/$$CI_PROJECT_NAME;
        # case 22 target sample ignored as not in dir
        - if: $MATRIX_NAME == "xam-case22-barcode-sheet-sample-notindir"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case22 --sample_sheet test_data/xam_ingress/case22/sample_sheet_sample_notindir.csv"
              AFTER_NEXTFLOW_CMD: >
                  $TEST_CMD test_data/xam_ingress/case22/ bam $$PWD/$$CI_PROJECT_NAME
                  && grep "Ignoring sample13: Found in sample sheet but a corresponding sample folder was not found in the input folder." .nextflow.log
        # case 22 missing sample name and sheet
        - if: $MATRIX_NAME == "xam-case22-barcode-no-sheet"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case22"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "Sample sheet or sample name must be provided."
        # case22 use barcoded sample sheet, include fail and unclassified
        - if: $MATRIX_NAME == "xam-case22-barcode-sheet-incl-all"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case22 --sample_sheet test_data/xam_ingress/case22/sample_sheet.csv --analyse_fail --analyse_unclassified"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case22/ bam $$PWD/$$CI_PROJECT_NAME;
        - if: $MATRIX_NAME == "s3-xam-case22-barcode-sheet-incl-all"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case22 --sample_sheet ${S3_TEST_DATA}/xam_ingress/case22/sample_sheet.csv --analyse_fail --analyse_unclassified"
              AFTER_NEXTFLOW_CMD: $TEST_CMD -s $S3_TEST_DATA/xam_ingress/case22/sample_sheet.csv ${S3_TEST_DATA}/xam_ingress/case22/ bam $$PWD/$$CI_PROJECT_NAME;


        # case 23 use sample sheet
        - if: $MATRIX_NAME == "xam-case23-alias-sheet"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case23 --sample_sheet test_data/xam_ingress/case23/sample_sheet.csv"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case23/ bam $$PWD/$$CI_PROJECT_NAME;
        - if: $MATRIX_NAME == "xam-case23-alias-sheet-dupe-alias"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case23 --sample_sheet test_data/xam_ingress/case23/sample_sheet_dupealias.csv"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "values in 'alias' column not unique"
        - if: $MATRIX_NAME == "xam-case23-alias-sheet-bad-alias"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case23 --sample_sheet test_data/xam_ingress/case23/sample_sheet_barcodealias.csv"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "values in 'alias' column must not begin with 'barcode'"
        # case 23 use sample name
        - if: $MATRIX_NAME == "xam-case23-alias-name"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case23 --sample sample1"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case23/ bam $$PWD/$$CI_PROJECT_NAME;
        # case 23 use sample sheet and override with sample name
        - if: $MATRIX_NAME == "xam-case23-alias-sheet-name"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case23 --sample sample1 --sample_sheet test_data/xam_ingress/case23/sample_sheet.csv"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case23/ bam $$PWD/$$CI_PROJECT_NAME;
        # case 23 target sample ignored as not in dir
        - if: $MATRIX_NAME == "xam-case23-alias-sheet-sample-notindir"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case23 --sample_sheet test_data/xam_ingress/case23/sample_sheet_sample_notindir.csv"
              AFTER_NEXTFLOW_CMD: >
                  $TEST_CMD test_data/xam_ingress/case23/ bam $$PWD/$$CI_PROJECT_NAME
                  && grep "Ignoring sample13: Found in sample sheet but a corresponding sample folder was not found in the input folder." .nextflow.log
        # case 23 missing sample name and sheet
        - if: $MATRIX_NAME == "xam-case23-alias-no-sheet"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case23"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "Sample sheet or sample name must be provided."
        # case 23 use aliased sample sheet include fail
        - if: $MATRIX_NAME == "xam-case23-alias-sheet-incl-fail"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case23 --sample_sheet test_data/xam_ingress/case23/sample_sheet.csv --analyse_fail"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case23/ bam $$PWD/$$CI_PROJECT_NAME;
        # case 23 use aliased sample sheet include unclassified
        - if: $MATRIX_NAME == "xam-case23-alias-sheet-incl-unclassified"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case23 --sample_sheet test_data/xam_ingress/case23/sample_sheet.csv --analyse_unclassified"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case23/ bam $$PWD/$$CI_PROJECT_NAME;
        # case23 use aliased sample sheet, include fail and unclassified
        - if: $MATRIX_NAME == "xam-case23-alias-sheet-incl-all"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case23 --sample_sheet test_data/xam_ingress/case23/sample_sheet.csv --analyse_fail --analyse_unclassified"
              AFTER_NEXTFLOW_CMD: $TEST_CMD test_data/xam_ingress/case23/ bam $$PWD/$$CI_PROJECT_NAME;
        - if: $MATRIX_NAME == "s3-xam-case23-barcode-sheet-incl-all"
          variables:
              NF_WORKFLOW_OPTS: "--bam ${S3_TEST_DATA}/xam_ingress/case23 --sample_sheet ${S3_TEST_DATA}/xam_ingress/case23/sample_sheet.csv --analyse_fail --analyse_unclassified"
              AFTER_NEXTFLOW_CMD: $TEST_CMD -s $S3_TEST_DATA/xam_ingress/case23/sample_sheet.csv ${S3_TEST_DATA}/xam_ingress/case23/ bam $$PWD/$$CI_PROJECT_NAME;


        # case24 use sample sheet, supply a conflicting barcode and alias dir for the same sample row
        - if: $MATRIX_NAME == "xam-case24-conflict"
          variables:
              NF_WORKFLOW_OPTS: "--bam test_data/xam_ingress/case24 --sample_sheet test_data/xam_ingress/case24/sample_sheet_conflict.csv"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "Found conflicting folders and cannot ingress both sample folder 'sample1' and barcode folder 'barcode01' for same sample sheet row."


        - if: $MATRIX_NAME == "unexpected-params"
          variables:
              NF_WORKFLOW_OPTS: "--fastq test_data/reads.fastq.gz --is_this_param_expected no"
              ASSERT_NEXTFLOW_FAILURE: "1"
              ASSERT_NEXTFLOW_FAILURE_REXP: "Found unexpected parameters:"

