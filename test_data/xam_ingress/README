# top-level directory with BAM and uBAM files (causes "Found mixed headers in
# (u)BAM files of sample ..." error)
├── case01
│   ├── garbage.txt
│   ├── reads0.bam
│   ├── reads1.ubam
│   ├── reads2.bam
│   └── reads3.bam

# take dir01, dir02, dir03
├── case02
│   ├── dir1
│   │   ├── reads0.bam
│   │   ├── reads1.bam
│   │   └── reads2.bam
│   ├── dir2
│   │   ├── reads0.bam
│   │   ├── reads1.bam
│   │   └── reads2.bam
│   └── dir3
│       ├── reads0.bam
│       ├── reads1.bam
│       └── reads2.bam

# dir01 has only BAM files, dir02 has only uBAM files, dir03 has a mixture; the
# sample sheet contains dir1, dir2, and dir4 (for which there is no directory)
├── case03
│   ├── dir1
│   │   ├── reads0.bam
│   │   ├── reads1.bam
│   │   └── reads2.bam
│   ├── dir2
│   │   ├── reads0.ubam
│   │   ├── reads1.ubam
│   │   └── reads2.ubam
│   ├── dir3
│   │   ├── reads0.bam
│   │   └── reads1.ubam
│   └── sample_sheet.csv

# both files are BAM, but the `@SQ` lines in their headers are ordered
# differently leading to an error ("Found mixed headers in (u)BAM files of
# sample 'case04'.")
├── case04
│   ├── reads0.bam
│   └── reads1.bam

# One input BAM is sorted and indexed, whereas the other is not.
# The workflow should recognize this, acknowledge where input XAM is sorted thanks to
# the HD tag, and recreate the index file where needed.
# This avoids sorting and indexing files that do not need it, saving space with large BAM
# inputs (e.g. human-size genomes).
└── case05
    ├── barcode01
    │   ├── reads.bam
    │   └── reads.bam.bai
    └── barcode02
        └── reads.bam

# A single sorted and indexed input BAM.
# The workflow should acknowledge that there is a sorted XAM thanks to
# the presence of the index, and should therefore skip its generation.
# This avoids sorting and indexing files that do not need it, saving
# space with large BAM inputs (e.g. human-size genomes).
└── case06
    ├── reads.bam
    └── reads.bam.bai

# A single unsorted BAM.
# The workflow should sort and index this.
└── case07
    └── reads.bam

# A single uBAM.
# The workflow should index this.
└── case08
    └── reads.bam

# A single sorted, but not indexed, BAM.
# The workflow should index this.
└── case09
    └── reads.bam

# A single sorted BAM file, but with a wrong
# index. The workflow should spot this and
# regenerate it.
└── case10
    ├── reads.bam
    └── reads.bam.bai

# A BAM file without a `@HD` line in the header.
└── case11
    └── reads.bam

# A single uBAM with RG headers
# The workflow should populate the metamap RG entries.
└── case12
    └── reads.bam

# Multiple uBAM with RG headers with different runid
# The workflow should populate the metamap RG entries with the union of RG DS entries.
└── case13
    ├── reads0.bam
    ├── reads1.bam
    └── reads2.bam

# Multiple uBAM with RG headers
# The workflow should print a warning as more than one basecall model is present between the input files.
└── case14
    ├── reads0.bam
    ├── reads1.bam
    └── reads2.bam

# case02 dir1 BAM with additional RG headers with same acquisition style runid
└── case15
    ├── reads0.bam
    ├── reads1.bam
    └── reads2.bam

# case02 dir1 BAM with additional RG headers with same protocol style runid
└── case16
    ├── reads0.bam
    ├── reads1.bam
    └── reads2.bam

# case04 but the SQ lines are ordered correctly and feature different
# SQ.UR tags that should not lead to a "Found mixed headers" error
# See CW-4842
├── case17
│   ├── reads0.bam
│   └── reads1.bam

# case02 dir1, SO retained to check that sorting skipped for merge
# See CW-4960
├── case18
│   ├── reads0.bam
│   ├── reads1.bam
│   └── reads2.bam

# case02 dir1, BAMs collated to lose SO, to check files are sorted before merge
# See CW-4960
├── case19
│   ├── reads0.bam
│   ├── reads1.bam
│   └── reads2.bam

# Case20: BAM from SAM with just a header
├── case20
│   ├── just_header.bam

# experiment layout [CW-4785]
# xam-case21-exp-no-files: Check case where no files are ingested.
# xam-case21-exp-single-file: Check single BAM in nested layout
# xam-case21-exp-spurious-level: Provide invalid directory layout, check error message.
case21
└── unclassified
    ├── bam_fail
    │   └── spurious_dir
    │       └── reads0.bam
    └── bam_pass
        └── reads0.bam

# xam-case22-barcode-name: Provide valid sample name by barcode, ingest single sample.
# xam-case22-barcode-sheet: Provide valid sample sheet, ingest all samples.
# xam-case22-barcode-sheet-name: Provide valid sample sheet and valid sample name, check that sample is ingressed with sample sheet metadata.
# xam-case22-barcode-sheet-sample-notindir: Provide sample sheet for sample that is not in ingress directory, check workflow completes, ingests nothing. Check warning is emitted that sample could not be found.
# xam-case22-barcode-no-sheet: Provide no sample sheet or sample name, check workflow fails with error message
# xam-case22-barcode-sheet-incl-all: Provide valid sample sheet, ingest all samples, ingest unclassified and failed
case22
├── barcode01
│   ├── YYYYMMDD_HHMM_0A_FLO00000_00000000
│   │   ├── bam_fail
│   │   │   └── reads0.bam
│   │   └── bam_pass
│   │       └── reads0.bam
│   ├── YYYYMMDD_HHMM_0B_FLO11111_11111111
│   │   ├── bam_fail
│   │   │   └── reads1.bam
│   │   └── bam_pass
│   │       └── reads1.bam
│   └── YYYYMMDD_HHMM_0C_FLO22222_22222222
│       ├── bam_fail
│       │   └── reads2.bam
│       └── bam_pass
│           └── reads2.bam
├── barcode02
│   ├── YYYYMMDD_HHMM_1A_FLO33333_00000000
│   │   └── bam_pass
│   │       └── reads0.bam
│   ├── YYYYMMDD_HHMM_1B_FLO44444_11111111
│   │   └── bam_pass
│   │       └── reads1.bam
│   └── YYYYMMDD_HHMM_1C_FLO55555_22222222
│       └── bam_pass
│           └── reads2.bam
├── sample_sheet.csv
├── sample_sheet_sample_notindir.csv

# case23 uses alias dirs with nested barcodes as well as unclassified
# xam-case23-alias-name: Provide valid sample name by alias, ingest single sample.
# xam-case23-alias-sheet: Provide valid sample sheet, ingest all samples by alias.
# xam-case23-alias-sheet-dupe-alias: Provide invalid sample sheet, check duplicate alias explodes
# xam-case23-alias-sheet-bad-alias: Provide invalid sample sheet, check alias starting "barcode" explodes
# xam-case23-alias-sheet-name: Provide valid sample sheet and alias, check that target sample is ingressed.
# xam-case23-alias-sheet-sample-notindir: Provide sample sheet for sample that is not in ingress directory, check workflow completes, ingests nothing. Check warning is emitted that sample could not be found.
# xam-case23-alias-no-sheet: Provide no sample sheet or sample name, check workflow fails with error message
# xam-case23-alias-sheet-incl-fail: Provide valid sample sheet, ingest all samples, including fail data
# xam-case23-alias-sheet-incl-unclassified: Provide valid sample sheet, ingest all samples, including unclassified
# xam-case23-alias-sheet-incl-all: Provide valid sample sheet, ingest all samples, ingest unclassified and failed
case23
├── sample1
│   ├── YYYYMMDD_HHMM_0A_FLO00000_00000000
│   │   └── barcode01
│   │       ├── bam_fail
│   │       │   └── reads0.bam
│   │       └── bam_pass
│   │           └── reads0.bam
│   ├── YYYYMMDD_HHMM_0B_FLO11111_11111111
│   │   └── barcode02
│   │       ├── bam_fail
│   │       │   └── reads1.bam
│   │       └── bam_pass
│   │           └── reads1.bam
│   └── YYYYMMDD_HHMM_0C_FLO22222_22222222
│       └── unclassified
│           ├── bam_fail
│           │   └── reads2.bam
│           └── bam_pass
│               └── reads2.bam
├── sampleN
│   ├── YYYYMMDD_HHMM_1A_FLO33333_00000000
│   │   └── barcode03
│   │       └── bam_pass
│   │           └── reads0.bam
│   ├── YYYYMMDD_HHMM_1B_FLO44444_11111111
│   │   └── barcode04
│   │       └── bam_pass
│   │           └── reads1.bam
│   └── YYYYMMDD_HHMM_1C_FLO55555_22222222
│       └── unclassified
│           └── bam_pass
│               └── reads2.bam
├── sample_sheet_barcodealias.csv
├── sample_sheet.csv
├── sample_sheet_dupealias.csv
└── sample_sheet_sample_notindir.csv

# case24 use sample sheet, supply a conflicting barcode and alias dir for the same sample row
